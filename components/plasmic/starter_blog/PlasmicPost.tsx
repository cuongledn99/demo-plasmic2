// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9BGrVX8Xe4x5VAnj3PzxZ6
// Component: bdJrtfIan-50U
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PostHeader from "../../PostHeader"; // plasmic-import: 9hzVCv9czZoRW/component
import AuthorBio from "../../AuthorBio"; // plasmic-import: v0iqjV131bI-i/component
import Footer from "../../Footer"; // plasmic-import: VbUWWtG2ZVms2/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_starter_blog.module.css"; // plasmic-import: 9BGrVX8Xe4x5VAnj3PzxZ6/projectcss
import * as sty from "./PlasmicPost.module.css"; // plasmic-import: bdJrtfIan-50U/css

import PlasmicLogoIcon from "./icons/PlasmicIcon__PlasmicLogo"; // plasmic-import: 7HFjwzkQHO_dS/icon

export type PlasmicPost__VariantMembers = {};

export type PlasmicPost__VariantsArgs = {};
type VariantPropType = keyof PlasmicPost__VariantsArgs;
export const PlasmicPost__VariantProps = new Array<VariantPropType>();

export type PlasmicPost__ArgsType = {
  contents?: React.ReactNode;
};

type ArgPropType = keyof PlasmicPost__ArgsType;
export const PlasmicPost__ArgProps = new Array<ArgPropType>("contents");

export type PlasmicPost__OverridesType = {
  root?: p.Flex<"div">;
  postHeader?: p.Flex<typeof PostHeader>;
  container?: p.Flex<"div">;
  authorBio?: p.Flex<typeof AuthorBio>;
  svg?: p.Flex<"svg">;
  previousPost?: p.Flex<"a"> & Partial<LinkProps>;
  nextPost?: p.Flex<"a"> & Partial<LinkProps>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultPostProps {
  dataFetches: PlasmicPost__Fetches;
}

function PlasmicPost__RenderFunc(props: {
  variants: PlasmicPost__VariantsArgs;
  args: PlasmicPost__ArgsType;
  overrides: PlasmicPost__OverridesType;
  dataFetches?: PlasmicPost__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style global jsx>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__obOtD)}
          >
            <PostHeader
              data-plasmic-name={"postHeader"}
              data-plasmic-override={overrides.postHeader}
              blogTitle={"Plasmic Starter Blog"}
              className={classNames("__wab_instance", sty.postHeader)}
              date={"January 1, 2020"}
              postTitle={"Hello world"}
            />

            <div className={classNames(defaultcss.all, sty.box__sbq1C)}>
              <div
                data-plasmic-name={"container"}
                data-plasmic-override={overrides.container}
                className={classNames(defaultcss.all, sty.container)}
              >
                {p.renderPlasmicSlot({
                  defaultContents:
                    "Blogging is so much fun! I could write on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on",
                  value: args.contents
                })}
              </div>
            </div>

            <div className={classNames(defaultcss.all, sty.box___5Ia54)} />

            <AuthorBio
              data-plasmic-name={"authorBio"}
              data-plasmic-override={overrides.authorBio}
              className={classNames("__wab_instance", sty.authorBio)}
              description={"Built with love by the Plasmic team. "}
              profilepic={
                <PlasmicLogoIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(defaultcss.all, sty.svg)}
                  role={"img"}
                />
              }
            />

            <div className={classNames(defaultcss.all, sty.box__nz0UG)}>
              <p.PlasmicLink
                data-plasmic-name={"previousPost"}
                data-plasmic-override={overrides.previousPost}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.previousPost
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Previous post"}
              </p.PlasmicLink>

              <p.PlasmicLink
                data-plasmic-name={"nextPost"}
                data-plasmic-override={overrides.nextPost}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.nextPost
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Next post"}
              </p.PlasmicLink>
            </div>

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "postHeader",
    "container",
    "authorBio",
    "svg",
    "previousPost",
    "nextPost",
    "footer"
  ],
  postHeader: ["postHeader"],
  container: ["container"],
  authorBio: ["authorBio", "svg"],
  svg: ["svg"],
  previousPost: ["previousPost"],
  nextPost: ["nextPost"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  postHeader: typeof PostHeader;
  container: "div";
  authorBio: typeof AuthorBio;
  svg: "svg";
  previousPost: "a";
  nextPost: "a";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPost__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPost__VariantsArgs;
    args?: PlasmicPost__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPost__Fetches;
  } & Omit<PlasmicPost__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPost__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPost__ArgProps,
      internalVariantPropNames: PlasmicPost__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPost__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPost";
  } else {
    func.displayName = `PlasmicPost.${nodeName}`;
  }
  return func;
}

export const PlasmicPost = Object.assign(
  // Top-level PlasmicPost renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    postHeader: makeNodeComponent("postHeader"),
    container: makeNodeComponent("container"),
    authorBio: makeNodeComponent("authorBio"),
    svg: makeNodeComponent("svg"),
    previousPost: makeNodeComponent("previousPost"),
    nextPost: makeNodeComponent("nextPost"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicPost
    internalVariantProps: PlasmicPost__VariantProps,
    internalArgProps: PlasmicPost__ArgProps
  }
);

export default PlasmicPost;
/* prettier-ignore-end */
